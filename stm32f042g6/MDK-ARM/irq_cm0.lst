


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ; * Copyright (c) 2013-2018 Arm Limited. All rights rese
                       rved.
    3 00000000         ; *
    4 00000000         ; * SPDX-License-Identifier: Apache-2.0
    5 00000000         ; *
    6 00000000         ; * Licensed under the Apache License, Version 2.0 (the 
                       License); you may
    7 00000000         ; * not use this file except in compliance with the Lice
                       nse.
    8 00000000         ; * You may obtain a copy of the License at
    9 00000000         ; *
   10 00000000         ; * www.apache.org/licenses/LICENSE-2.0
   11 00000000         ; *
   12 00000000         ; * Unless required by applicable law or agreed to in wr
                       iting, software
   13 00000000         ; * distributed under the License is distributed on an A
                       S IS BASIS, WITHOUT
   14 00000000         ; * WARRANTIES OR CONDITIONS OF ANY KIND, either express
                        or implied.
   15 00000000         ; * See the License for the specific language governing 
                       permissions and
   16 00000000         ; * limitations under the License.
   17 00000000         ; *
   18 00000000         ; * ----------------------------------------------------
                       -------------------------
   19 00000000         ; *
   20 00000000         ; * Project:     CMSIS-RTOS RTX
   21 00000000         ; * Title:       Cortex-M0 Exception handlers
   22 00000000         ; *
   23 00000000         ; * ----------------------------------------------------
                       -------------------------
   24 00000000         ; */
   25 00000000         
   26 00000000         
   27 00000000 00000014 
                       I_T_RUN_OFS
                               EQU              20          ; osRtxInfo.thread.
                                                            run offset
   28 00000000 00000038 
                       TCB_SP_OFS
                               EQU              56          ; TCB.SP offset
   29 00000000         
   30 00000000         
   31 00000000                 PRESERVE8
   32 00000000                 THUMB
   33 00000000         
   34 00000000         
   35 00000000                 AREA             |.constdata|, DATA, READONLY
   36 00000000                 EXPORT           irqRtxLib
   37 00000000 00      irqRtxLib
                               DCB              0           ; Non weak library 
                                                            reference
   38 00000001         
   39 00000001         
   40 00000001                 AREA             |.text|, CODE, READONLY
   41 00000000         
   42 00000000         
   43 00000000         SVC_Handler



ARM Macro Assembler    Page 2 


                               PROC
   44 00000000                 EXPORT           SVC_Handler
   45 00000000                 IMPORT           osRtxUserSVC
   46 00000000                 IMPORT           osRtxInfo
   47 00000000                 IF               :DEF:MPU_LOAD
   49                          ENDIF
   50 00000000         
   51 00000000 4670            MOV              R0,LR
   52 00000002 08C0            LSRS             R0,R0,#3    ; Determine return 
                                                            stack from EXC_RETU
                                                            RN bit 2
   53 00000004 D32C            BCC              SVC_MSP     ; Branch if return 
                                                            stack is MSP
   54 00000006 F3EF 8009       MRS              R0,PSP      ; Get PSP
   55 0000000A         
   56 0000000A         SVC_Number
   57 0000000A 6981            LDR              R1,[R0,#24] ; Load saved PC fro
                                                            m stack
   58 0000000C 1E89            SUBS             R1,R1,#2    ; Point to SVC inst
                                                            ruction
   59 0000000E 7809            LDRB             R1,[R1]     ; Load SVC number
   60 00000010 2900            CMP              R1,#0
   61 00000012 D129            BNE              SVC_User    ; Branch if not SVC
                                                             0
   62 00000014         
   63 00000014 B501            PUSH             {R0,LR}     ; Save SP and EXC_R
                                                            ETURN
   64 00000016 C80F            LDMIA            R0,{R0-R3}  ; Load function par
                                                            ameters from stack
   65 00000018 47B8            BLX              R7          ; Call service func
                                                            tion
   66 0000001A BC0C            POP              {R2,R3}     ; Restore SP and EX
                                                            C_RETURN
   67 0000001C C203            STMIA            R2!,{R0-R1} ; Store function re
                                                            turn values
   68 0000001E 469E            MOV              LR,R3       ; Set EXC_RETURN
   69 00000020         
   70 00000020         SVC_Context
   71 00000020 4B1E            LDR              R3,=osRtxInfo+I_T_RUN_OFS ; Loa
                                                            d address of osRtxI
                                                            nfo.run
   72 00000022 CB06            LDMIA            R3!,{R1,R2} ; Load osRtxInfo.th
                                                            read.run: curr & ne
                                                            xt
   73 00000024 4291            CMP              R1,R2       ; Check if thread s
                                                            witch is required
   74 00000026 D01E            BEQ              SVC_Exit    ; Branch when threa
                                                            ds are the same
   75 00000028         
   76 00000028 2900            CMP              R1,#0
   77 0000002A D009            BEQ              SVC_ContextSwitch ; Branch if r
                                                            unning thread is de
                                                            leted
   78 0000002C         
   79 0000002C         SVC_ContextSave
   80 0000002C F3EF 8009       MRS              R0,PSP      ; Get PSP
   81 00000030 3820            SUBS             R0,R0,#32   ; Calculate SP
   82 00000032 6388            STR              R0,[R1,#TCB_SP_OFS] ; Store SP
   83 00000034 C0F0            STMIA            R0!,{R4-R7} ; Save R4..R7



ARM Macro Assembler    Page 3 


   84 00000036 4644            MOV              R4,R8
   85 00000038 464D            MOV              R5,R9
   86 0000003A 4656            MOV              R6,R10
   87 0000003C 465F            MOV              R7,R11
   88 0000003E C0F0            STMIA            R0!,{R4-R7} ; Save R8..R11
   89 00000040         
   90 00000040         SVC_ContextSwitch
   91 00000040 3B08            SUBS             R3,R3,#8    ; Adjust address
   92 00000042 601A            STR              R2,[R3]     ; osRtxInfo.thread.
                                                            run: curr = next
   93 00000044         
   94 00000044                 IF               :DEF:MPU_LOAD
   99                          ENDIF
  100 00000044         
  101 00000044         SVC_ContextRestore
  102 00000044 6B90            LDR              R0,[R2,#TCB_SP_OFS] ; Load SP
  103 00000046 3010            ADDS             R0,R0,#16   ; Adjust address
  104 00000048 C8F0            LDMIA            R0!,{R4-R7} ; Restore R8..R11
  105 0000004A 46A0            MOV              R8,R4
  106 0000004C 46A9            MOV              R9,R5
  107 0000004E 46B2            MOV              R10,R6
  108 00000050 46BB            MOV              R11,R7
  109 00000052 F380 8809       MSR              PSP,R0      ; Set PSP
  110 00000056 3820            SUBS             R0,R0,#32   ; Adjust address
  111 00000058 C8F0            LDMIA            R0!,{R4-R7} ; Restore R4..R7
  112 0000005A         
  113 0000005A 2002            MOVS             R0,#~0xFFFFFFFD
  114 0000005C 43C0            MVNS             R0,R0       ; Set EXC_RETURN va
                                                            lue
  115 0000005E 4700            BX               R0          ; Exit from handler
                                                            
  116 00000060         
  117 00000060         SVC_MSP
  118 00000060 F3EF 8008       MRS              R0,MSP      ; Get MSP
  119 00000064 E7D1            B                SVC_Number
  120 00000066         
  121 00000066         SVC_Exit
  122 00000066 4770            BX               LR          ; Exit from handler
                                                            
  123 00000068         
  124 00000068         SVC_User
  125 00000068 4A0D            LDR              R2,=osRtxUserSVC ; Load address
                                                             of SVC table
  126 0000006A 6813            LDR              R3,[R2]     ; Load SVC maximum 
                                                            number
  127 0000006C 4299            CMP              R1,R3       ; Check SVC number 
                                                            range
  128 0000006E D8FA            BHI              SVC_Exit    ; Branch if out of 
                                                            range
  129 00000070         
  130 00000070 B501            PUSH             {R0,LR}     ; Save SP and EXC_R
                                                            ETURN
  131 00000072 0089            LSLS             R1,R1,#2
  132 00000074 5853            LDR              R3,[R2,R1]  ; Load address of S
                                                            VC function
  133 00000076 469C            MOV              R12,R3
  134 00000078 C80F            LDMIA            R0,{R0-R3}  ; Load function par
                                                            ameters from stack
  135 0000007A 47E0            BLX              R12         ; Call service func



ARM Macro Assembler    Page 4 


                                                            tion
  136 0000007C BC0C            POP              {R2,R3}     ; Restore SP and EX
                                                            C_RETURN
  137 0000007E 6010            STR              R0,[R2]     ; Store function re
                                                            turn value
  138 00000080 469E            MOV              LR,R3       ; Set EXC_RETURN
  139 00000082         
  140 00000082 4770            BX               LR          ; Return from handl
                                                            er
  141 00000084         
  142 00000084                 ALIGN
  143 00000084                 ENDP
  144 00000084         
  145 00000084         
  146 00000084         PendSV_Handler
                               PROC
  147 00000084                 EXPORT           PendSV_Handler
  148 00000084                 IMPORT           osRtxPendSV_Handler
  149 00000084         
  150 00000084 B501            PUSH             {R0,LR}     ; Save EXC_RETURN
  151 00000086 F7FF FFFE       BL               osRtxPendSV_Handler ; Call osRt
                                                            xPendSV_Handler
  152 0000008A BC03            POP              {R0,R1}     ; Restore EXC_RETUR
                                                            N
  153 0000008C 468E            MOV              LR,R1       ; Set EXC_RETURN
  154 0000008E E7C7            B                SVC_Context
  155 00000090         
  156 00000090                 ALIGN
  157 00000090                 ENDP
  158 00000090         
  159 00000090         
  160 00000090         SysTick_Handler
                               PROC
  161 00000090                 EXPORT           SysTick_Handler
  162 00000090                 IMPORT           osRtxTick_Handler
  163 00000090         
  164 00000090 B501            PUSH             {R0,LR}     ; Save EXC_RETURN
  165 00000092 F7FF FFFE       BL               osRtxTick_Handler ; Call osRtxT
                                                            ick_Handler
  166 00000096 BC03            POP              {R0,R1}     ; Restore EXC_RETUR
                                                            N
  167 00000098 468E            MOV              LR,R1       ; Set EXC_RETURN
  168 0000009A E7C1            B                SVC_Context
  169 0000009C         
  170 0000009C                 ALIGN
  171 0000009C                 ENDP
  172 0000009C         
  173 0000009C         
  174 0000009C                 END
              00000014 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --apcs=interw
ork --depend=stm32f042g6\irq_cm0.d -ostm32f042g6\irq_cm0.o -I.\RTE\CMSIS -I.\RT
E\_stm32f042g6 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5
\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5
.3.0\CMSIS\RTOS2\RTX\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Dri
vers\CMSIS\Device\ST\STM32F0xx\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP
\2.0.0\Drivers\STM32F0xx_HAL_Driver\Inc -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DF
P\2.0.0\Drivers\STM32F0xx_HAL_Driver\Inc\Legacy --predefine="__EVAL SETA 1" --p



ARM Macro Assembler    Page 5 


redefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 525" --predefi
ne="_RTE_ SETA 1" --predefine="STM32F042x6 SETA 1" --list=irq_cm0.lst C:\Keil_v
5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\Source\ARM\irq_cm0.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.constdata 00000000

Symbol: .constdata
   Definitions
      At line 35 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
   Uses
      None
Comment: .constdata unused
irqRtxLib 00000000

Symbol: irqRtxLib
   Definitions
      At line 37 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
   Uses
      At line 36 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
Comment: irqRtxLib used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 40 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
   Uses
      None
Comment: .text unused
PendSV_Handler 00000084

Symbol: PendSV_Handler
   Definitions
      At line 146 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
   Uses
      At line 147 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
Comment: PendSV_Handler used once
SVC_Context 00000020

Symbol: SVC_Context
   Definitions
      At line 70 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
   Uses
      At line 154 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
      At line 168 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s

SVC_ContextRestore 00000044

Symbol: SVC_ContextRestore
   Definitions
      At line 101 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
   Uses
      None
Comment: SVC_ContextRestore unused
SVC_ContextSave 0000002C

Symbol: SVC_ContextSave
   Definitions
      At line 79 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
   Uses
      None
Comment: SVC_ContextSave unused
SVC_ContextSwitch 00000040

Symbol: SVC_ContextSwitch
   Definitions
      At line 90 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
   Uses
      At line 77 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
Comment: SVC_ContextSwitch used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

SVC_Exit 00000066

Symbol: SVC_Exit
   Definitions
      At line 121 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
   Uses
      At line 74 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
      At line 128 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s

SVC_Handler 00000000

Symbol: SVC_Handler
   Definitions
      At line 43 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
   Uses
      At line 44 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
Comment: SVC_Handler used once
SVC_MSP 00000060

Symbol: SVC_MSP
   Definitions
      At line 117 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
   Uses
      At line 53 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
Comment: SVC_MSP used once
SVC_Number 0000000A

Symbol: SVC_Number
   Definitions
      At line 56 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
   Uses
      At line 119 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
Comment: SVC_Number used once
SVC_User 00000068

Symbol: SVC_User
   Definitions
      At line 124 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
   Uses
      At line 61 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
Comment: SVC_User used once
SysTick_Handler 00000090

Symbol: SysTick_Handler
   Definitions
      At line 160 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 161 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
Comment: SysTick_Handler used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

I_T_RUN_OFS 00000014

Symbol: I_T_RUN_OFS
   Definitions
      At line 27 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
   Uses
      At line 71 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
Comment: I_T_RUN_OFS used once
TCB_SP_OFS 00000038

Symbol: TCB_SP_OFS
   Definitions
      At line 28 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
   Uses
      At line 82 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
      At line 102 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

osRtxInfo 00000000

Symbol: osRtxInfo
   Definitions
      At line 46 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
   Uses
      At line 71 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
Comment: osRtxInfo used once
osRtxPendSV_Handler 00000000

Symbol: osRtxPendSV_Handler
   Definitions
      At line 148 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
   Uses
      At line 151 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
Comment: osRtxPendSV_Handler used once
osRtxTick_Handler 00000000

Symbol: osRtxTick_Handler
   Definitions
      At line 162 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
   Uses
      At line 165 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
Comment: osRtxTick_Handler used once
osRtxUserSVC 00000000

Symbol: osRtxUserSVC
   Definitions
      At line 45 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\So
urce\ARM\irq_cm0.s
   Uses
      At line 125 in file C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\RTOS2\RTX\S
ource\ARM\irq_cm0.s
Comment: osRtxUserSVC used once
4 symbols
361 symbols in table
